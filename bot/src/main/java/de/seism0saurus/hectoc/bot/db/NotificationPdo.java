package de.seism0saurus.hectoc.bot.db;

import jakarta.persistence.*;
import jakarta.validation.constraints.Max;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;

import lombok.NoArgsConstructor;
import org.hibernate.annotations.JdbcTypeCode;
import org.hibernate.type.SqlTypes;
import org.hibernate.validator.constraints.Length;
import org.jetbrains.annotations.Nullable;
import social.bigbone.api.entity.Status;

import java.util.UUID;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * The Notification to process and store a notifications to posted challenges.
 *
 * @author seism0saurus
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name = "notifications")
public class NotificationPdo {

    /**
     * The id of this class in form of a {@link java.util.UUID UUID}.
     * The id will be automatically generated by the database layer if left empty.
     *
     * Example: AA97B177-9383-4934-8543-0F91A7A02836
     *
     * @see <a href="https://www.ietf.org/rfc/rfc4122.txt">rfc4122</a>
     */
    @Id
    @Column(columnDefinition = "VARCHAR(36)")
    @GeneratedValue
    @JdbcTypeCode(SqlTypes.VARCHAR)
    private UUID id;

    /**
     * The id of the notification.
     * The notification is created at mastodon, when an answer to a challenge is sent.
     * The id is needed access the notification at mastodon.
     *
     * Example: 111425781005997018
     *
     * @see <a href="https://docs.joinmastodon.org/entities/Notification/#id">Mastodon API Notification ID</a>
     * @see social.bigbone.api.entity.Notification#getId()
     */
    @Column
    @Length(max = 255)
    private String notificationId;

    /**
     * The status id of the toot with the solution.
     *
     * Example: 111425781005997018
     *
     * @see <a href="https://docs.joinmastodon.org/entities/Status/#id">Mastodon API Status ID</a>
     * @see Status#getId()
     */
    @Column
    @Length(max = 255)
    private String statusId;

    /**
     * The author of toot with the solution.
     * We need the author to directly address the author in private responses.
     * The author has the format username@instance.
     *
     * @see <a href=https://docs.joinmastodon.org/entities/Account/#acct">Mastodon API Account acct</a>
     *
     * Example: seism0saurus@infosec.exchange
     */
    @Column
    @Length(max = 255)
    private String author;

    /**
     * The proposed solution in toot of the notification.
     * A solution should consist of a combination of
     * the mathematical operations + - * / ^ and the parenthesis ( ) and numbers.
     * Numbers can be combined, but you have to use all 6 of them and are not allowed to change the order.
     *
     * Example: 1+99*1^(8+7)
     */
    @Column
    @Length(max = 255)
    private String solution;

    /**
     * The read status of the notification.
     * Dissmissed is true, if the notification was acknowledged at mastodon.
     * It will not show up again.
     * Dissmissed is false, if the notification is unread.
     */
    @Column
    @Builder.Default
    private boolean dismissed = false;

    /**
     * The {@link ChallengePdo ChallengePdo} of this object.
     * The challenge is mapped by the {@link ChallengePdo#getId() ChallengePdo ID}.
     * Only with the reference to the challenge we can check,
     * if the proposed solution is a valid solution for that specific challenge.
     */
    @ManyToOne(cascade = CascadeType.MERGE)
    @JoinColumn(name = "challenge_id", columnDefinition = "VARCHAR(255)")
    private ChallengePdo challenge;

    /**
     * Extracts a solition from the given text and sets the solution of this class to that value.
     * Solution will be set to null, if no solution could be found in the provided text.
     * @param text The text of a toot.
     */
    public void setSolution(final String text){
        Pattern p = Pattern.compile("<(br|p)>([123456789+-\\/*^\\(\\)\\s]+)<(br|\\/p)>");
        Matcher matcher = p.matcher(text);
        if (matcher.find()){
            this.solution = matcher.group(2).replaceAll("\\s","");
        } else {
            this.solution = null;
        }
    }

    /**
     * The builder class of the NotificationPdo.
     * Only the method to set the solution is implemented.
     * The other parts will be autogenerated by lombock.
     */
    public static class NotificationPdoBuilder {

        private String solution;

        /**
         * Extracts a solition from the given text and sets the solution of this class to that value.
         * Solution will be set to null, if no solution could be found in the provided text.
         * @param text The text of a toot.
         */
        public NotificationPdoBuilder solution(final String text){
            Pattern p = Pattern.compile("<(br|p)>([123456789+-\\/*^\\(\\)\\s]+)<(br|\\/p)>");
            Matcher matcher = p.matcher(text);
            if (matcher.find()){
                this.solution = matcher.group(2).replaceAll("\\s","");
            } else {
                this.solution = null;
            }
            return this;
        }
    }
}


