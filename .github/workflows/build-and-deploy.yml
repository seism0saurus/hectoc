name: "Build and deploy"

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
    types: [ "closed" ]

env:
  VERSION: 0.0.1-SNAPSHOT

jobs:
  build-shared:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Build the shared part of the project
        run: mvn --batch-mode install --file shared/pom.xml
      - name: Cache local Maven repository
        uses: actions/cache/save@v4
        with:
          path: ~/.m2/repository
          key: maven-repo

  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      bot: ${{ steps.filter.outputs.bot }}
      bruteforcer: ${{ steps.filter.outputs.bruteforcer }}
      webapp: ${{ steps.filter.outputs.webapp }}
      shared: ${{ steps.filter.outputs.shared }}
      pom: ${{ steps.filter.outputs.pom }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            bot:
              - 'bot/**'
            bruteforcer:
              - 'bruteforcer/**'
            webapp:
              - 'webapp/**'
            shared:
              - 'shared/**'
            parent:
              - 'pom.xml'

  build-bot:
    runs-on: ubuntu-latest
    if: needs.changes.outputs.bot == 'true' || needs.changes.outputs.shared == 'true' || needs.changes.outputs.parent == 'true'
    needs:
      - build-shared
      - changes
    permissions: write-all
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Get cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: maven-repo
      - name: Build the bot
        run: mvn --batch-mode --update-snapshots install --file bot/pom.xml
      - name: Copy jar
        run: cp /home/runner/work/hectoc/hectoc/bot/target/bot-*.jar bot.jar
      - name: Archive bot jar
        uses: actions/upload-artifact@v4
        with:
          name: bot
          path: bot.jar
          retention-days: 1

  create-image-bot:
    runs-on: ubuntu-latest
    needs: build-bot
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: bot
          path: bot/containerimage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/seism0saurus/hectoc-bot
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: bot/containerimage/.
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-bot:
    runs-on: ubuntu-latest
    needs: create-image-bot
    environment: hourlyhectoc.seism0saurus.de
    steps:
      - name: Prepare ssh
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
        run: |
          echo "${SSH_KEY}" > ssh.key
          chmod 600 ssh.key
          mkdir ~/.ssh
          echo "${KNOWN_HOSTS}" > ~/.ssh/known_hosts
      - name: Restart docker-compose
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ vars.SSH_HOST }}
        run: ssh -i ssh.key -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} -C "sudo /usr/local/bin/upgrade-hectoc-bot.sh"


  build-webapp:
    runs-on: ubuntu-latest
    if: needs.changes.outputs.webapp == 'true' || needs.changes.outputs.shared == 'true' || needs.changes.outputs.parent == 'true'
    needs:
      - build-shared
      - changes
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Get cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: maven-repo
      - name: Install Node
        uses: actions/setup-node@v6
        with:
          node-version: 18.13.0
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: npm dependencies and Angular cli
        run: cd webapp/angular && npm install -g @angular/cli@17
      - name: Build the webapp
        run: mvn --batch-mode --update-snapshots compile install --file webapp/pom.xml
      - name: Copy jar
        run: cp /home/runner/work/hectoc/hectoc/webapp/target/webapp-*.jar webapp.jar
      - name: Archive webapp jar
        uses: actions/upload-artifact@v4
        with:
          name: webapp
          path: webapp.jar
          retention-days: 1

  create-image-webapp:
    runs-on: ubuntu-latest
    needs: build-webapp
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: webapp
          path: webapp/containerimage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/seism0saurus/hectoc-webapp
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: webapp/containerimage/.
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-webapp:
    runs-on: ubuntu-latest
    needs: create-image-webapp
    environment: hectoc.seism0saurus.de
    steps:
      - name: Prepare ssh
        env:
          SSH_KEY: ${{ secrets.SSH_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
        run: |
          echo "${SSH_KEY}" > ssh.key
          chmod 600 ssh.key
          mkdir ~/.ssh
          echo "${KNOWN_HOSTS}" > ~/.ssh/known_hosts
      - name: Restart docker-compose
        env:
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ vars.SSH_HOST }}
        run: ssh -i ssh.key -p ${SSH_PORT} ${SSH_USER}@${SSH_HOST} -C "sudo /usr/local/bin/upgrade-hectoc-webapp.sh"


  build-bruteforcer:
    runs-on: ubuntu-latest
    if: needs.changes.outputs.bruteforcer == 'true' || needs.changes.outputs.shared == 'true' || needs.changes.outputs.parent == 'true'
    needs:
      - build-shared
      - changes
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      - name: Get cache for local Maven repository
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: maven-repo
      - name: Build the bruteforcer
        run: mvn --batch-mode --update-snapshots install --file bruteforcer/pom.xml
      - name: Copy jar
        run: cp /home/runner/work/hectoc/hectoc/bruteforcer/target/bruteforcer-*.jar bruteforcer.jar
      - name: Archive bruteforcer jar
        uses: actions/upload-artifact@v4
        with:
          name: bruteforcer
          path: bruteforcer.jar
          retention-days: 1

  create-image-bruteforcer:
    runs-on: ubuntu-latest
    needs: build-bruteforcer
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: bruteforcer
          path: bruteforcer/containerimage
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/seism0saurus/hectoc-bruteforcer
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: bruteforcer/containerimage/.
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}